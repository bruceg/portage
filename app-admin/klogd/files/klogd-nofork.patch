diff -u sysklogd-1.4/Makefile sysklogd-1.4-nofork/Makefile
--- sysklogd-1.4/Makefile	Mon Oct 12 14:25:15 1998
+++ sysklogd-1.4-nofork/Makefile	Thu Dec  7 16:59:37 2000
@@ -62,9 +62,8 @@
 syslogd: syslogd.o pidfile.o
 	${CC} ${LDFLAGS} -o syslogd syslogd.o pidfile.o ${LIBS}
 
-klogd:	klogd.o syslog.o pidfile.o ksym.o ksym_mod.o
-	${CC} ${LDFLAGS} -o klogd klogd.o syslog.o pidfile.o ksym.o \
-		ksym_mod.o ${LIBS}
+klogd:	klogd.o syslog.o ksym.o ksym_mod.o
+	${CC} ${LDFLAGS} -o klogd klogd.o syslog.o ksym.o ksym_mod.o ${LIBS}
 
 syslog_tst: syslog_tst.o
 	${CC} ${LDFLAGS} -o syslog_tst syslog_tst.o
diff -u sysklogd-1.4/klogd.8 sysklogd-1.4-nofork/klogd.8
--- sysklogd-1.4/klogd.8	Tue Sep 12 15:15:28 2000
+++ sysklogd-1.4-nofork/klogd.8	Mon Jan 22 14:44:44 2001
@@ -43,21 +43,6 @@
 Enable debugging mode.  This will generate \fBLOTS\fR of output to
 stderr.
 .TP
-.BI "\-f " file
-Log messages to the specified filename rather than to the syslog facility.
-.TP
-.BI "\-i \-I"
-Signal the currently executing klogd daemon.  Both of these switches control
-the loading/reloading of symbol information.  The \-i switch signals the
-daemon to reload the kernel module symbols.  The \-I switch signals for a
-reload of both the static kernel symbols and the kernel module symbols.
-.TP
-.B "\-n"
-Avoid auto-backgrounding.  This is needed especially if the
-.B klogd
-is started and controlled by 
-.BR init (8).
-.TP
 .B "-o"
 Execute in 'one\-shot' mode.  This causes \fBklogd\fP to read and log
 all the messages that are found in the kernel message buffers.  After
diff -u sysklogd-1.4/klogd.c sysklogd-1.4-nofork/klogd.c
--- sysklogd-1.4/klogd.c	Mon Sep 18 01:34:11 2000
+++ sysklogd-1.4-nofork/klogd.c	Mon Jan 22 14:43:38 2001
@@ -268,14 +268,6 @@
 #define LOG_BUFFER_SIZE 4096
 #define LOG_LINE_LENGTH 1000
 
-#ifndef TESTING
-#if defined(FSSTND)
-static char	*PidFile = _PATH_VARRUN "klogd.pid";
-#else
-static char	*PidFile = "/etc/klogd.pid";
-#endif
-#endif
-
 static int	kmsg,
 		change_state = 0,
 		terminate = 0,
@@ -285,14 +277,11 @@
 
 static int	use_syscall = 0,
 		one_shot = 0,
-		symbol_lookup = 1,
-		no_fork = 0;	/* don't fork - don't run in daemon mode */
+		symbol_lookup = 1;
 
 static char	*symfile = (char *) 0,
 		log_buffer[LOG_BUFFER_SIZE];
 
-static FILE *output_file = (FILE *) 0;
-
 static enum LOGSRC {none, proc, kernel} logsrc;
 
 int debugging = 0;
@@ -307,7 +296,6 @@
 extern void stop_daemon(int sig);
 extern void reload_daemon(int sig);
 static void Terminate(void);
-static void SignalDaemon(int);
 static void ReloadSymbols(void);
 static void ChangeLogging(void);
 static enum LOGSRC GetKernelLogSrc(void);
@@ -338,8 +326,7 @@
 		break;
 	}
 
-	if ( output_file != (FILE *) 0 )
-		fflush(output_file);
+	fflush(stdout);
 	return;
 }
 
@@ -405,30 +392,10 @@
 	CloseLogSrc();
 	Syslog(LOG_INFO, "Kernel log daemon terminating.");
 	sleep(1);
-	if ( output_file != (FILE *) 0 )
-		fclose(output_file);
 	closelog();
-#ifndef TESTING
-	(void) remove_pid(PidFile);
-#endif
 	exit(1);
 }
 
-static void SignalDaemon(sig)
-
-     int sig;
-
-{
-#ifndef TESTING
-	auto int pid = check_pid(PidFile);
-
-	kill(pid, sig);
-#else
-	kill(getpid(), sig);
-#endif
-	return;
-}
-
 
 static void ReloadSymbols()
 
@@ -560,7 +527,6 @@
 
 {
 	va_list ap;
-	char *argl;
 
 	if ( debugging )
 	{
@@ -570,69 +536,11 @@
 	}
 
 	/* Handle output to a file. */
-	if ( output_file != (FILE *) 0 )
-	{
-		va_start(ap, fmt);
-		vfprintf(output_file, fmt, ap);
-		va_end(ap);
-		fputc('\n', output_file);
-		fflush(output_file);
-		if (!one_shot)
-			fsync(fileno(output_file));
-		return;
-	}
-	
-	/* Output using syslog. */
-	if (!strcmp(fmt, "%s"))
-	{
-		va_start(ap, fmt);
-		argl = va_arg(ap, char *);
-		if (argl[0] == '<' && argl[1] && argl[2] == '>')
-		{
-			switch ( argl[1] )
-			{
-			case '0':
-				priority = LOG_EMERG;
-				break;
-			case '1':
-				priority = LOG_ALERT;
-				break;
-			case '2':
-				priority = LOG_CRIT;
-				break;
-			case '3':
-				priority = LOG_ERR;
-				break;
-			case '4':
-				priority = LOG_WARNING;
-				break;
-			case '5':
-				priority = LOG_NOTICE;
-				break;
-			case '6':
-				priority = LOG_INFO;
-				break;
-			case '7':
-			default:
-				priority = LOG_DEBUG;
-			}
-			argl += 3;
-		}
-		syslog(priority, fmt, argl);
-		va_end(ap);
-#ifdef TESTING
-		putchar('\n');
-#endif
-		return;
-	}
-
 	va_start(ap, fmt);
-	vsyslog(priority, fmt, ap);
+	vfprintf(stdout, fmt, ap);
 	va_end(ap);
-#ifdef TESTING
-	printf ("\n");
-#endif
-
+	fputc('\n', stdout);
+	fflush(stdout);
 	return;
 }
 
@@ -965,11 +873,9 @@
 	char *argv[];
 
 {
-	auto int	ch,
-			use_output = 0;
+	auto int	ch;
 
-	auto char	*log_level = (char *) 0,
-			*output = (char *) 0;
+	auto char	*log_level = (char *) 0;
 
 #ifndef TESTING
 	chdir ("/");
@@ -987,22 +893,9 @@
 		    case 'd':		/* Activity debug mode. */
 			debugging = 1;
 			break;
-		    case 'f':		/* Define an output file. */
-			output = optarg;
-			use_output++;
-			break;
-		    case 'i':		/* Reload module symbols. */
-			SignalDaemon(SIGUSR1);
-			return(0);
-		    case 'I':
-			SignalDaemon(SIGUSR2);
-			return(0);
 		    case 'k':		/* Kernel symbol file. */
 			symfile = optarg;
 			break;
-		    case 'n':		/* don't fork */
-			no_fork++;
-			break;
 		    case 'o':		/* One-shot mode. */
 			one_shot = 1;
 			break;
@@ -1035,62 +928,6 @@
 	}		
 
 
-#ifndef TESTING
-	/*
-	 * The following code allows klogd to auto-background itself.
-	 * What happens is that the program forks and the parent quits.
-	 * The child closes all its open file descriptors, and issues a
-	 * call to setsid to establish itself as an independent session
-	 * immune from control signals.
-	 *
-	 * fork() is only called if it should run in daemon mode, fork is
-	 * not disabled with the command line argument and there's no
-	 * such process running.
-	 */
-	if ( (!one_shot) && (!no_fork) )
-	{
-		if (!check_pid(PidFile))
-		{
-			if ( fork() == 0 )
-			{
-				auto int fl;
-				int num_fds = getdtablesize();
-		
-				/* This is the child closing its file descriptors. */
-				for (fl= 0; fl <= num_fds; ++fl)
-				{
-					if ( fileno(stdout) == fl && use_output )
-						if ( strcmp(output, "-") == 0 )
-							continue;
-					close(fl);
-				}
- 
-				setsid();
-			}
-			else
-				exit(0);
-		}
-		else
-		{
-			fputs("klogd: Already running.\n", stderr);
-			exit(1);
-		}
-	}
-
-
-	/* tuck my process id away */
-	if (!check_pid(PidFile))
-	{
-		if (!write_pid(PidFile))
-			Terminate();
-	}
-	else
-	{
-		fputs("klogd: Already running.\n", stderr);
-		Terminate();
-	}
-#endif	
-
 	/* Signal setups. */
 	for (ch= 1; ch < NSIG; ++ch)
 		signal(ch, SIG_IGN);
@@ -1102,22 +939,6 @@
 	signal(SIGCONT, restart);
 	signal(SIGUSR1, reload_daemon);
 	signal(SIGUSR2, reload_daemon);
-
-
-	/* Open outputs. */
-	if ( use_output )
-	{
-		if ( strcmp(output, "-") == 0 )
-			output_file = stdout;
-		else if ( (output_file = fopen(output, "w")) == (FILE *) 0 )
-		{
-			fprintf(stderr, "klogd: Cannot open output file " \
-				"%s - %s\n", output, strerror(errno));
-			return(1);
-		}
-	}
-	else
-		openlog("kernel", 0, LOG_KERN);
 
 
 	/* Handle one-shot logging. */
diff -u sysklogd-1.4/version.h sysklogd-1.4-nofork/version.h
--- sysklogd-1.4/version.h	Mon Sep 18 01:33:58 2000
+++ sysklogd-1.4-nofork/version.h	Mon Jan 22 14:39:39 2001
@@ -1,2 +1,2 @@
-#define VERSION "1.4"
+#define VERSION "1.4-nofork"
 #define PATCHLEVEL "0"
